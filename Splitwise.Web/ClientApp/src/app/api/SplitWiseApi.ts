/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export module Splitwise {
export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class WeatherForecastClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44315";
    }

    get(): Observable<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<WeatherForecast[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<WeatherForecast[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<WeatherForecast[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WeatherForecast[]>(<any>null);
    }
}

@Injectable()
export class AccountClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44315";
    }

    checkLogin(): boolean {
      if (localStorage.getItem('token') != null) {
        return true;
      } else {
        return false;
      }
    }

    login(login: Login){
        let url_ = this.baseUrl + "/api/Account/login";
        url_ = url_.replace(/[?&]$/, "");

        // const content_ = JSON.stringify(login);

        let options_ : any = {
            // observe: "response",
            // responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json"
            })
        };
        return this.http.post(url_,login,options_);
        // return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
        //     return this.processLogin(response_);
        // })).pipe(_observableCatch((response_: any) => {
        //     if (response_ instanceof HttpResponseBase) {
        //         try {
        //             return this.processLogin(<any>response_);
        //         } catch (e) {
        //             return <Observable<Login>><any>_observableThrow(e);
        //         }
        //     } else
        //         return <Observable<Login>><any>_observableThrow(response_);
        // }));
    }

    // protected processLogin(response: HttpResponseBase): Observable<Login> {
    //     const status = response.status;
    //     const responseBlob =
    //         response instanceof HttpResponse ? response.body :
    //         (<any>response).error instanceof Blob ? (<any>response).error : undefined;

    //     let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    //     if (status === 200) {
    //         return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
    //         let result200: any = null;
    //         let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
    //         result200 = Login.fromJS(resultData200);
    //         return _observableOf(result200);
    //         }));
    //     } else if (status !== 200 && status !== 204) {
    //         return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
    //         return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    //         }));
    //     }
    //     return _observableOf<Login>(<any>null);
    // }

    register(register: any): Observable<Register> {
        let url_ = this.baseUrl + "/api/Account/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(register);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(<any>response_);
                } catch (e) {
                    return <Observable<Register>><any>_observableThrow(e);
                }
            } else
                return <Observable<Register>><any>_observableThrow(response_);
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<Register> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Register.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Register>(<any>null);
    }

    getUserInfo(): Observable<UserModel> {
      let url_ = this.baseUrl + "/api/Account/userInfo";
      url_ = url_.replace(/[?&]$/, "");

      let options_ : any = {
          observe: "response",
          responseType: "blob",
          headers: new HttpHeaders({
              "Accept": "application/json",
              Authorization:'Bearer ' + localStorage.getItem('token')
          })
      };

      return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
          return this.processGetUserInfo(response_);
      })).pipe(_observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
              try {
                  return this.processGetUserInfo(<any>response_);
              } catch (e) {
                  return <Observable<UserModel>><any>_observableThrow(e);
              }
          } else
              return <Observable<UserModel>><any>_observableThrow(response_);
      }));
  }

  protected processGetUserInfo(response: HttpResponseBase): Observable<UserModel> {
      const status = response.status;
      const responseBlob =
          response instanceof HttpResponse ? response.body :
          (<any>response).error instanceof Blob ? (<any>response).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
      if (status === 200) {
          return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UserModel.fromJS(resultData200);
          return _observableOf(result200);
          }));
      } else if (status !== 200 && status !== 204) {
          return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          }));
      }
      return _observableOf<UserModel>(<any>null);
  }

    logout(): Observable<void> {
        let url_ = this.baseUrl + "/api/Account/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogout(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processLogout(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class ActivityClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44315";
    }

    activityList(): Observable<Activity[]> {
        let url_ = this.baseUrl + "/api/Activities";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
                Authorization:'Bearer ' + localStorage.getItem('token')
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processActivityList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processActivityList(<any>response_);
                } catch (e) {
                    return <Observable<Activity[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Activity[]>><any>_observableThrow(response_);
        }));
    }

    protected processActivityList(response: HttpResponseBase): Observable<Activity[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Activity.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Activity[]>(<any>null);
    }
}

@Injectable()
export class ExpenseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44315";
    }

    getexpense(): Observable<Expense[]> {
        let url_ = this.baseUrl + "/api/Expenses";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
                Authorization:'Bearer ' + localStorage.getItem('token')
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetexpense(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetexpense(<any>response_);
                } catch (e) {
                    return <Observable<Expense[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Expense[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetexpense(response: HttpResponseBase): Observable<Expense[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Expense.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Expense[]>(<any>null);
    }

    postExpense(addExpense: AddExpense): Observable<Expense> {
        let url_ = this.baseUrl + "/api/Expenses";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(addExpense);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostExpense(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostExpense(<any>response_);
                } catch (e) {
                    return <Observable<Expense>><any>_observableThrow(e);
                }
            } else
                return <Observable<Expense>><any>_observableThrow(response_);
        }));
    }

    protected processPostExpense(response: HttpResponseBase): Observable<Expense> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Expense.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Expense>(<any>null);
    }

    getExpenseBasedOnId(id: number): Observable<Expense> {
        let url_ = this.baseUrl + "/api/Expenses/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExpenseBasedOnId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExpenseBasedOnId(<any>response_);
                } catch (e) {
                    return <Observable<Expense>><any>_observableThrow(e);
                }
            } else
                return <Observable<Expense>><any>_observableThrow(response_);
        }));
    }

    protected processGetExpenseBasedOnId(response: HttpResponseBase): Observable<Expense> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Expense.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Expense>(<any>null);
    }

    editExpense(id: number, addExpense: AddExpense): Observable<Expense> {
        let url_ = this.baseUrl + "/api/Expenses/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(addExpense);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditExpense(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditExpense(<any>response_);
                } catch (e) {
                    return <Observable<Expense>><any>_observableThrow(e);
                }
            } else
                return <Observable<Expense>><any>_observableThrow(response_);
        }));
    }

    protected processEditExpense(response: HttpResponseBase): Observable<Expense> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Expense.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Expense>(<any>null);
    }

    deleteExpense(id: number): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Expenses/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteExpense(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteExpense(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteExpense(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    settlment(settleUp: SettleUp): Observable<PaymentBook> {
        let url_ = this.baseUrl + "/api/Expenses/settlement";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(settleUp);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSettlment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSettlment(<any>response_);
                } catch (e) {
                    return <Observable<PaymentBook>><any>_observableThrow(e);
                }
            } else
                return <Observable<PaymentBook>><any>_observableThrow(response_);
        }));
    }

    protected processSettlment(response: HttpResponseBase): Observable<PaymentBook> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaymentBook.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaymentBook>(<any>null);
    }
}

@Injectable()
export class FriendClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44315";
    }

    getFriendList(): Observable<Friend[]> {
        let url_ = this.baseUrl + "/api/Friends";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
                Authorization:'Bearer ' + localStorage.getItem('token')
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFriendList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFriendList(<any>response_);
                } catch (e) {
                    return <Observable<Friend[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Friend[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetFriendList(response: HttpResponseBase): Observable<Friend[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Friend.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Friend[]>(<any>null);
    }

    postFriend(addFriend: AddFriend): Observable<Friend> {
        let url_ = this.baseUrl + "/api/Friends";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(addFriend);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json",
                Authorization:'Bearer ' + localStorage.getItem('token')
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostFriend(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostFriend(<any>response_);
                } catch (e) {
                    return <Observable<Friend>><any>_observableThrow(e);
                }
            } else
                return <Observable<Friend>><any>_observableThrow(response_);
        }));
    }

    protected processPostFriend(response: HttpResponseBase): Observable<Friend> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Friend.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Friend>(<any>null);
    }

    deleteFriend(id: string | null): Observable<Group> {
        let url_ = this.baseUrl + "/api/Friends/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
                Authorization:'Bearer ' + localStorage.getItem('token')
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFriend(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFriend(<any>response_);
                } catch (e) {
                    return <Observable<Group>><any>_observableThrow(e);
                }
            } else
                return <Observable<Group>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteFriend(response: HttpResponseBase): Observable<Group> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Group.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Group>(<any>null);
    }

    getFriendDetail(id: string | null): Observable<UserModel> {
      let url_ = this.baseUrl + "/api/Friends/{id}";
      if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

      let options_ : any = {
          observe: "response",
          responseType: "blob",
          headers: new HttpHeaders({
              "Accept": "application/json",
              Authorization:'Bearer ' + localStorage.getItem('token')
          })
      };

      return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
          return this.processGetFriendDetail(response_);
      })).pipe(_observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
              try {
                  return this.processGetFriendDetail(<any>response_);
              } catch (e) {
                  return <Observable<UserModel>><any>_observableThrow(e);
              }
          } else
              return <Observable<UserModel>><any>_observableThrow(response_);
      }));
  }

  protected processGetFriendDetail(response: HttpResponseBase): Observable<UserModel> {
      const status = response.status;
      const responseBlob =
          response instanceof HttpResponse ? response.body :
          (<any>response).error instanceof Blob ? (<any>response).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
      if (status === 200) {
          return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UserModel.fromJS(resultData200);
          return _observableOf(result200);
          }));
      } else if (status !== 200 && status !== 204) {
          return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          }));
      }
      return _observableOf<UserModel>(<any>null);
  }

    getFriendExpenseList(id: string | null): Observable<Settlement[]> {
        let url_ = this.baseUrl + "/api/Friends/expense/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFriendExpenseList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFriendExpenseList(<any>response_);
                } catch (e) {
                    return <Observable<Settlement[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Settlement[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetFriendExpenseList(response: HttpResponseBase): Observable<Settlement[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Settlement.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Settlement[]>(<any>null);
    }
}

@Injectable()
export class GroupClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44315";
    }

    groupList(): Observable<GroupReturn[]> {
        let url_ = this.baseUrl + "/api/Groups";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
                Authorization:'Bearer ' + localStorage.getItem('token')
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGroupList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGroupList(<any>response_);
                } catch (e) {
                    return <Observable<GroupReturn[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<GroupReturn[]>><any>_observableThrow(response_);
        }));
    }

    protected processGroupList(response: HttpResponseBase): Observable<GroupReturn[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
          return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
              result200 = [] as any;
              for (let item of resultData200)
                  result200!.push(GroupReturn.fromJS(item));
          }
          return _observableOf(result200);
          }));
      } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GroupReturn[]>(<any>null);
    }

    postGroup(addGroup: AddGroup): Observable<Group> {
        let url_ = this.baseUrl + "/api/Groups";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(addGroup);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json",
                Authorization:'Bearer ' + localStorage.getItem('token')
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostGroup(<any>response_);
                } catch (e) {
                    return <Observable<Group>><any>_observableThrow(e);
                }
            } else
                return <Observable<Group>><any>_observableThrow(response_);
        }));
    }

    protected processPostGroup(response: HttpResponseBase): Observable<Group> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Group.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Group>(<any>null);
    }

    getGroupBasedOnId(id: number): Observable<AddGroup> {
      let url_ = this.baseUrl + "/api/Groups/{id}";
      if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
      url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

      let options_ : any = {
          observe: "response",
          responseType: "blob",
          headers: new HttpHeaders({
              "Accept": "application/json"
          })
      };

      return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
          return this.processGetGroupBasedOnId(response_);
      })).pipe(_observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
              try {
                  return this.processGetGroupBasedOnId(<any>response_);
              } catch (e) {
                  return <Observable<AddGroup>><any>_observableThrow(e);
              }
          } else
              return <Observable<AddGroup>><any>_observableThrow(response_);
      }));
  }

  protected processGetGroupBasedOnId(response: HttpResponseBase): Observable<AddGroup> {
      const status = response.status;
      const responseBlob =
          response instanceof HttpResponse ? response.body :
          (<any>response).error instanceof Blob ? (<any>response).error : undefined;

      let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
      if (status === 200) {
          return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = AddGroup.fromJS(resultData200);
          return _observableOf(result200);
          }));
      } else if (status !== 200 && status !== 204) {
          return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          }));
      }
      return _observableOf<AddGroup>(<any>null);
  }

    editGroup(id: number, editGroup: AddGroup): Observable<Group> {
        let url_ = this.baseUrl + "/api/Groups/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(editGroup);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditGroup(<any>response_);
                } catch (e) {
                    return <Observable<Group>><any>_observableThrow(e);
                }
            } else
                return <Observable<Group>><any>_observableThrow(response_);
        }));
    }

    protected processEditGroup(response: HttpResponseBase): Observable<Group> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Group.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Group>(<any>null);
    }

    deleteGroup(id: number): Observable<Group> {
        let url_ = this.baseUrl + "/api/Groups/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json",
                Authorization:'Bearer ' + localStorage.getItem('token')
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteGroup(<any>response_);
                } catch (e) {
                    return <Observable<Group>><any>_observableThrow(e);
                }
            } else
                return <Observable<Group>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteGroup(response: HttpResponseBase): Observable<Group> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Group.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Group>(<any>null);
    }

    getGroupExpenseList(id: number): Observable<Expense[]> {
        let url_ = this.baseUrl + "/api/Groups/expense/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetGroupExpenseList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGroupExpenseList(<any>response_);
                } catch (e) {
                    return <Observable<Expense[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Expense[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetGroupExpenseList(response: HttpResponseBase): Observable<Expense[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Expense.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Expense[]>(<any>null);
    }
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export class Login implements ILogin {
    email?: string | undefined;
    password?: string | undefined;
    rememberMe?: boolean;

    constructor(data?: ILogin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
            this.rememberMe = _data["rememberMe"];
        }
    }

    static fromJS(data: any): Login {
        data = typeof data === 'object' ? data : {};
        let result = new Login();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["rememberMe"] = this.rememberMe;
        return data;
    }
}

export interface ILogin {
    email?: string | undefined;
    password?: string | undefined;
    rememberMe?: boolean;
}

export class Register implements IRegister {
    email?: string | undefined;
    password?: string | undefined;
    phoneNumber?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    currency?: string | undefined;

    constructor(data?: IRegister) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
            this.phoneNumber = _data["phoneNumber"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.currency = _data["currency"];
        }
    }

    static fromJS(data: any): Register {
        data = typeof data === 'object' ? data : {};
        let result = new Register();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["phoneNumber"] = this.phoneNumber;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["currency"] = this.currency;
        return data;
    }
}

export interface IRegister {
    email?: string | undefined;
    password?: string | undefined;
    phoneNumber?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    currency?: string | undefined;
}

export class Activity implements IActivity {
    activityId?: number;
    description?: string | undefined;
    userId?: string | undefined;
    user?: ApplicationUser | undefined;
    date?: Date;
    groupId?: number | undefined;
    group?: Group | undefined;

    constructor(data?: IActivity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.activityId = _data["activityId"];
            this.description = _data["description"];
            this.userId = _data["userId"];
            this.user = _data["user"] ? ApplicationUser.fromJS(_data["user"]) : <any>undefined;
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.groupId = _data["groupId"];
            this.group = _data["group"] ? Group.fromJS(_data["group"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Activity {
        data = typeof data === 'object' ? data : {};
        let result = new Activity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activityId"] = this.activityId;
        data["description"] = this.description;
        data["userId"] = this.userId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["groupId"] = this.groupId;
        data["group"] = this.group ? this.group.toJSON() : <any>undefined;
        return data;
    }
}

export interface IActivity {
    activityId?: number;
    description?: string | undefined;
    userId?: string | undefined;
    user?: ApplicationUser | undefined;
    date?: Date;
    groupId?: number | undefined;
    group?: Group | undefined;
}

export class IdentityUserOfString implements IIdentityUserOfString {
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;

    constructor(data?: IIdentityUserOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.normalizedUserName = _data["normalizedUserName"];
            this.email = _data["email"];
            this.normalizedEmail = _data["normalizedEmail"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.passwordHash = _data["passwordHash"];
            this.securityStamp = _data["securityStamp"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
        }
    }

    static fromJS(data: any): IdentityUserOfString {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["passwordHash"] = this.passwordHash;
        data["securityStamp"] = this.securityStamp;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        return data;
    }
}

export interface IIdentityUserOfString {
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
}

export class IdentityUser extends IdentityUserOfString implements IIdentityUser {

    constructor(data?: IIdentityUser) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): IdentityUser {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IIdentityUser extends IIdentityUserOfString {
}

export class ApplicationUser extends IdentityUser implements IApplicationUser {
    firstName?: string | undefined;
    lastName?: string | undefined;
    currency?: string | undefined;
    balance?: number;

    constructor(data?: IApplicationUser) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.currency = _data["currency"];
            this.balance = _data["balance"];
        }
    }

    static fromJS(data: any): ApplicationUser {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["currency"] = this.currency;
        data["balance"] = this.balance;
        super.toJSON(data);
        return data;
    }
}

export interface IApplicationUser extends IIdentityUser {
    firstName?: string | undefined;
    lastName?: string | undefined;
    currency?: string | undefined;
    balance?: number;
}

export class Group implements IGroup {
    groupId?: number;
    name?: string | undefined;
    createdBy?: string | undefined;
    user?: ApplicationUser | undefined;
    date?: Date;
    simplyfyDebits?: boolean;
    isDeleted?: boolean;

    constructor(data?: IGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
            this.name = _data["name"];
            this.createdBy = _data["createdBy"];
            this.user = _data["user"] ? ApplicationUser.fromJS(_data["user"]) : <any>undefined;
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.simplyfyDebits = _data["simplyfyDebits"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): Group {
        data = typeof data === 'object' ? data : {};
        let result = new Group();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        data["name"] = this.name;
        data["createdBy"] = this.createdBy;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["simplyfyDebits"] = this.simplyfyDebits;
        data["isDeleted"] = this.isDeleted;
        return data;
    }
}

export interface IGroup {
    groupId?: number;
    name?: string | undefined;
    createdBy?: string | undefined;
    user?: ApplicationUser | undefined;
    date?: Date;
    simplyfyDebits?: boolean;
    isDeleted?: boolean;
}

export class Expense implements IExpense {
    expenseId?: number;
    description?: string | undefined;
    amount?: number;
    splitType?: string | undefined;
    groupId?: number | undefined;
    group?: Group | undefined;
    date?: Date;
    createdBy?: string | undefined;
    user?: ApplicationUser | undefined;
    isSettled?: boolean;
    isDeleted?: boolean;

    constructor(data?: IExpense) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expenseId = _data["expenseId"];
            this.description = _data["description"];
            this.amount = _data["amount"];
            this.splitType = _data["splitType"];
            this.groupId = _data["groupId"];
            this.group = _data["group"] ? Group.fromJS(_data["group"]) : <any>undefined;
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.user = _data["user"] ? ApplicationUser.fromJS(_data["user"]) : <any>undefined;
            this.isSettled = _data["isSettled"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): Expense {
        data = typeof data === 'object' ? data : {};
        let result = new Expense();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expenseId"] = this.expenseId;
        data["description"] = this.description;
        data["amount"] = this.amount;
        data["splitType"] = this.splitType;
        data["groupId"] = this.groupId;
        data["group"] = this.group ? this.group.toJSON() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["isSettled"] = this.isSettled;
        data["isDeleted"] = this.isDeleted;
        return data;
    }
}

export interface IExpense {
    expenseId?: number;
    description?: string | undefined;
    amount?: number;
    splitType?: string | undefined;
    groupId?: number | undefined;
    group?: Group | undefined;
    date?: Date;
    createdBy?: string | undefined;
    user?: ApplicationUser | undefined;
    isSettled?: boolean;
    isDeleted?: boolean;
}

export class AddExpense implements IAddExpense {
    expenseId?: number;
    shares?: Share[] | undefined;
    description?: string | undefined;
    groupId?: number | undefined;
    amount?: number;
    splitType?: string | undefined;
    createdBy?: string | undefined;
    date?: Date;
    isDeleted?: boolean;
    isSettled?: boolean;
    paidBy?: UserExpenseMapper[] | undefined;

    constructor(data?: IAddExpense) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expenseId = _data["expenseId"];
            if (Array.isArray(_data["shares"])) {
                this.shares = [] as any;
                for (let item of _data["shares"])
                    this.shares!.push(Share.fromJS(item));
            }
            this.description = _data["description"];
            this.groupId = _data["groupId"];
            this.amount = _data["amount"];
            this.splitType = _data["splitType"];
            this.createdBy = _data["createdBy"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.isDeleted = _data["isDeleted"];
            this.isSettled = _data["isSettled"];
            if (Array.isArray(_data["paidBy"])) {
                this.paidBy = [] as any;
                for (let item of _data["paidBy"])
                    this.paidBy!.push(UserExpenseMapper.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddExpense {
        data = typeof data === 'object' ? data : {};
        let result = new AddExpense();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expenseId"] = this.expenseId;
        if (Array.isArray(this.shares)) {
            data["shares"] = [];
            for (let item of this.shares)
                data["shares"].push(item.toJSON());
        }
        data["description"] = this.description;
        data["groupId"] = this.groupId;
        data["amount"] = this.amount;
        data["splitType"] = this.splitType;
        data["createdBy"] = this.createdBy;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["isSettled"] = this.isSettled;
        if (Array.isArray(this.paidBy)) {
            data["paidBy"] = [];
            for (let item of this.paidBy)
                data["paidBy"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAddExpense {
    expenseId?: number;
    shares?: Share[] | undefined;
    description?: string | undefined;
    groupId?: number | undefined;
    amount?: number;
    splitType?: string | undefined;
    createdBy?: string | undefined;
    date?: Date;
    isDeleted?: boolean;
    isSettled?: boolean;
    paidBy?: UserExpenseMapper[] | undefined;
}

export class UserModel implements IUserModel {
  user?: ApplicationUser | undefined;
  expenses?: Expense[] | undefined;
  groups?: GroupReturn[] | undefined;
  owesfrom?: PayerModel[] | undefined;
  owsto?: PayerModel[] | undefined;
  activities?: Activity[] | undefined;
  transactions?: PaymentBook[] | undefined;

  constructor(data?: IUserModel) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.user = _data["user"] ? ApplicationUser.fromJS(_data["user"]) : <any>undefined;
          if (Array.isArray(_data["expenses"])) {
              this.expenses = [] as any;
              for (let item of _data["expenses"])
                  this.expenses!.push(Expense.fromJS(item));
          }
          if (Array.isArray(_data["groups"])) {
              this.groups = [] as any;
              for (let item of _data["groups"])
                  this.groups!.push(GroupReturn.fromJS(item));
          }
          if (Array.isArray(_data["owesfrom"])) {
              this.owesfrom = [] as any;
              for (let item of _data["owesfrom"])
                  this.owesfrom!.push(PayerModel.fromJS(item));
          }
          if (Array.isArray(_data["owsto"])) {
              this.owsto = [] as any;
              for (let item of _data["owsto"])
                  this.owsto!.push(PayerModel.fromJS(item));
          }
          if (Array.isArray(_data["activities"])) {
              this.activities = [] as any;
              for (let item of _data["activities"])
                  this.activities!.push(Activity.fromJS(item));
          }
          if (Array.isArray(_data["transactions"])) {
              this.transactions = [] as any;
              for (let item of _data["transactions"])
                  this.transactions!.push(PaymentBook.fromJS(item));
          }
      }
  }

  static fromJS(data: any): UserModel {
      data = typeof data === 'object' ? data : {};
      let result = new UserModel();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["user"] = this.user ? this.user.toJSON() : <any>undefined;
      if (Array.isArray(this.expenses)) {
          data["expenses"] = [];
          for (let item of this.expenses)
              data["expenses"].push(item.toJSON());
      }
      if (Array.isArray(this.groups)) {
          data["groups"] = [];
          for (let item of this.groups)
              data["groups"].push(item.toJSON());
      }
      if (Array.isArray(this.owesfrom)) {
          data["owesfrom"] = [];
          for (let item of this.owesfrom)
              data["owesfrom"].push(item.toJSON());
      }
      if (Array.isArray(this.owsto)) {
          data["owsto"] = [];
          for (let item of this.owsto)
              data["owsto"].push(item.toJSON());
      }
      if (Array.isArray(this.activities)) {
          data["activities"] = [];
          for (let item of this.activities)
              data["activities"].push(item.toJSON());
      }
      if (Array.isArray(this.transactions)) {
          data["transactions"] = [];
          for (let item of this.transactions)
              data["transactions"].push(item.toJSON());
      }
      return data;
  }
}

export interface IUserModel {
  user?: ApplicationUser | undefined;
  expenses?: Expense[] | undefined;
  groups?: GroupReturn[] | undefined;
  owesfrom?: PayerModel[] | undefined;
  owsto?: PayerModel[] | undefined;
  activities?: Activity[] | undefined;
  transactions?: PaymentBook[] | undefined;
}

export class PayerModel implements IPayerModel {
  payerId?: string | undefined;
  payer?: ApplicationUser | undefined;
  amount?: number;

  constructor(data?: IPayerModel) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.payerId = _data["payerId"];
          this.payer = _data["payer"] ? ApplicationUser.fromJS(_data["payer"]) : <any>undefined;
          this.amount = _data["amount"];
      }
  }

  static fromJS(data: any): PayerModel {
      data = typeof data === 'object' ? data : {};
      let result = new PayerModel();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["payerId"] = this.payerId;
      data["payer"] = this.payer ? this.payer.toJSON() : <any>undefined;
      data["amount"] = this.amount;
      return data;
  }
}

export interface IPayerModel {
  payerId?: string | undefined;
  payer?: ApplicationUser | undefined;
  amount?: number;
}

export class Share implements IShare {
    name?: string | undefined;
    email?: string | undefined;
    share_Percentage?: number;
    share_Amount?: number;

    constructor(data?: IShare) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.share_Percentage = _data["share_Percentage"];
            this.share_Amount = _data["share_Amount"];
        }
    }

    static fromJS(data: any): Share {
        data = typeof data === 'object' ? data : {};
        let result = new Share();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["share_Percentage"] = this.share_Percentage;
        data["share_Amount"] = this.share_Amount;
        return data;
    }
}

export interface IShare {
    name?: string | undefined;
    email?: string | undefined;
    share_Percentage?: number;
    share_Amount?: number;
}

export class UserExpenseMapper implements IUserExpenseMapper {
    name?: string | undefined;
    email?: string | undefined;
    paid_Amount?: number;

    constructor(data?: IUserExpenseMapper) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.paid_Amount = _data["paid_Amount"];
        }
    }

    static fromJS(data: any): UserExpenseMapper {
        data = typeof data === 'object' ? data : {};
        let result = new UserExpenseMapper();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["paid_Amount"] = this.paid_Amount;
        return data;
    }
}

export interface IUserExpenseMapper {
    name?: string | undefined;
    email?: string | undefined;
    paid_Amount?: number;
}

export class PaymentBook implements IPaymentBook {
    paymentBookId?: number;
    payer?: string | undefined;
    payerUser?: ApplicationUser | undefined;
    payee?: string | undefined;
    payeeUser?: ApplicationUser | undefined;
    paid_Amount?: number;
    settlementId?: number;
    settlement?: Settlement | undefined;

    constructor(data?: IPaymentBook) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.paymentBookId = _data["paymentBookId"];
            this.payer = _data["payer"];
            this.payerUser = _data["payerUser"] ? ApplicationUser.fromJS(_data["payerUser"]) : <any>undefined;
            this.payee = _data["payee"];
            this.payeeUser = _data["payeeUser"] ? ApplicationUser.fromJS(_data["payeeUser"]) : <any>undefined;
            this.paid_Amount = _data["paid_Amount"];
            this.settlementId = _data["settlementId"];
            this.settlement = _data["settlement"] ? Settlement.fromJS(_data["settlement"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PaymentBook {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentBook();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paymentBookId"] = this.paymentBookId;
        data["payer"] = this.payer;
        data["payerUser"] = this.payerUser ? this.payerUser.toJSON() : <any>undefined;
        data["payee"] = this.payee;
        data["payeeUser"] = this.payeeUser ? this.payeeUser.toJSON() : <any>undefined;
        data["paid_Amount"] = this.paid_Amount;
        data["settlementId"] = this.settlementId;
        data["settlement"] = this.settlement ? this.settlement.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPaymentBook {
    paymentBookId?: number;
    payer?: string | undefined;
    payerUser?: ApplicationUser | undefined;
    payee?: string | undefined;
    payeeUser?: ApplicationUser | undefined;
    paid_Amount?: number;
    settlementId?: number;
    settlement?: Settlement | undefined;
}

export class Settlement implements ISettlement {
    settlementId?: number;
    expenseId?: number;
    expense?: Expense | undefined;
    payer?: string | undefined;
    payerUser?: ApplicationUser | undefined;
    payee?: string | undefined;
    payeeUser?: ApplicationUser | undefined;
    date?: Date;
    amount?: number;
    groupId?: number | undefined;
    group?: Group | undefined;

    constructor(data?: ISettlement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.settlementId = _data["settlementId"];
            this.expenseId = _data["expenseId"];
            this.expense = _data["expense"] ? Expense.fromJS(_data["expense"]) : <any>undefined;
            this.payer = _data["payer"];
            this.payerUser = _data["payerUser"] ? ApplicationUser.fromJS(_data["payerUser"]) : <any>undefined;
            this.payee = _data["payee"];
            this.payeeUser = _data["payeeUser"] ? ApplicationUser.fromJS(_data["payeeUser"]) : <any>undefined;
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.amount = _data["amount"];
            this.groupId = _data["groupId"];
            this.group = _data["group"] ? Group.fromJS(_data["group"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Settlement {
        data = typeof data === 'object' ? data : {};
        let result = new Settlement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["settlementId"] = this.settlementId;
        data["expenseId"] = this.expenseId;
        data["expense"] = this.expense ? this.expense.toJSON() : <any>undefined;
        data["payer"] = this.payer;
        data["payerUser"] = this.payerUser ? this.payerUser.toJSON() : <any>undefined;
        data["payee"] = this.payee;
        data["payeeUser"] = this.payeeUser ? this.payeeUser.toJSON() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["amount"] = this.amount;
        data["groupId"] = this.groupId;
        data["group"] = this.group ? this.group.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISettlement {
    settlementId?: number;
    expenseId?: number;
    expense?: Expense | undefined;
    payer?: string | undefined;
    payerUser?: ApplicationUser | undefined;
    payee?: string | undefined;
    payeeUser?: ApplicationUser | undefined;
    date?: Date;
    amount?: number;
    groupId?: number | undefined;
    group?: Group | undefined;
}

export class SettleUp implements ISettleUp {
    expenseId?: number;
    payer?: string | undefined;
    payee?: string | undefined;
    amount?: number;
    date?: Date;
    groupId?: number | undefined;

    constructor(data?: ISettleUp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.expenseId = _data["expenseId"];
            this.payer = _data["payer"];
            this.payee = _data["payee"];
            this.amount = _data["amount"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.groupId = _data["groupId"];
        }
    }

    static fromJS(data: any): SettleUp {
        data = typeof data === 'object' ? data : {};
        let result = new SettleUp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expenseId"] = this.expenseId;
        data["payer"] = this.payer;
        data["payee"] = this.payee;
        data["amount"] = this.amount;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["groupId"] = this.groupId;
        return data;
    }
}

export interface ISettleUp {
    expenseId?: number;
    payer?: string | undefined;
    payee?: string | undefined;
    amount?: number;
    date?: Date;
    groupId?: number | undefined;
}

export class Friend implements IFriend {
    friendId?: number;
    friend1?: string | undefined;
    user1?: ApplicationUser | undefined;
    friend2?: string | undefined;
    user2?: ApplicationUser | undefined;

    constructor(data?: IFriend) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.friendId = _data["friendId"];
            this.friend1 = _data["friend1"];
            this.user1 = _data["user1"] ? ApplicationUser.fromJS(_data["user1"]) : <any>undefined;
            this.friend2 = _data["friend2"];
            this.user2 = _data["user2"] ? ApplicationUser.fromJS(_data["user2"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Friend {
        data = typeof data === 'object' ? data : {};
        let result = new Friend();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["friendId"] = this.friendId;
        data["friend1"] = this.friend1;
        data["user1"] = this.user1 ? this.user1.toJSON() : <any>undefined;
        data["friend2"] = this.friend2;
        data["user2"] = this.user2 ? this.user2.toJSON() : <any>undefined;
        return data;
    }
}

export interface IFriend {
    friendId?: number;
    friend1?: string | undefined;
    user1?: ApplicationUser | undefined;
    friend2?: string | undefined;
    user2?: ApplicationUser | undefined;
}

export class AddFriend implements IAddFriend {
    friend1?: string | undefined;
    friend2?: string | undefined;

    constructor(data?: IAddFriend) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.friend1 = _data["friend1"];
            this.friend2 = _data["friend2"];
        }
    }

    static fromJS(data: any): AddFriend {
        data = typeof data === 'object' ? data : {};
        let result = new AddFriend();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["friend1"] = this.friend1;
        data["friend2"] = this.friend2;
        return data;
    }
}

export interface IAddFriend {
    friend1?: string | undefined;
    friend2?: string | undefined;
}

export class GroupReturn implements IGroupReturn {
    groupId?: number;
    name?: string | undefined;
    userId?: string | undefined;

    constructor(data?: IGroupReturn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
            this.name = _data["name"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): GroupReturn {
        data = typeof data === 'object' ? data : {};
        let result = new GroupReturn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        data["name"] = this.name;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IGroupReturn {
    groupId?: number;
    name?: string | undefined;
    userId?: string | undefined;
}

export class AddGroup implements IAddGroup {
  groupId?: number;
  name?: string;
  createdBy?: string | undefined;
  user?: ApplicationUser | undefined;
  date?: Date;
  simplyfyDebits?: boolean;
  isDeleted?: boolean;
  users?: GroupUserMapping[] | undefined;

  constructor(data?: IAddGroup) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.groupId = _data["groupId"];
          this.name = _data["name"];
          this.createdBy = _data["createdBy"];
          this.user = _data["user"] ? ApplicationUser.fromJS(_data["user"]) : <any>undefined;
          this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
          this.simplyfyDebits = _data["simplyfyDebits"];
          this.isDeleted = _data["isDeleted"];
          if (Array.isArray(_data["users"])) {
              this.users = [] as any;
              for (let item of _data["users"])
                  this.users!.push(GroupUserMapping.fromJS(item));
          }
      }
  }

  static fromJS(data: any): AddGroup {
      data = typeof data === 'object' ? data : {};
      let result = new AddGroup();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["groupId"] = this.groupId;
      data["name"] = this.name;
      data["createdBy"] = this.createdBy;
      data["user"] = this.user ? this.user.toJSON() : <any>undefined;
      data["date"] = this.date ? this.date.toISOString() : <any>undefined;
      data["simplyfyDebits"] = this.simplyfyDebits;
      data["isDeleted"] = this.isDeleted;
      if (Array.isArray(this.users)) {
          data["users"] = [];
          for (let item of this.users)
              data["users"].push(item.toJSON());
      }
      return data;
  }
}

export interface IAddGroup {
  groupId?: number;
  name?: string;
  createdBy?: string | undefined;
  user?: ApplicationUser | undefined;
  date?: Date;
  simplyfyDebits?: boolean;
  isDeleted?: boolean;
  users?: GroupUserMapping[] | undefined;
}

export class GroupUserMapping implements IGroupUserMapping {
    name?: string | undefined;
    email?: string | undefined;

    constructor(data?: IGroupUserMapping) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): GroupUserMapping {
        data = typeof data === 'object' ? data : {};
        let result = new GroupUserMapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        return data;
    }
}

export interface IGroupUserMapping {
    name?: string | undefined;
    email?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}

}
